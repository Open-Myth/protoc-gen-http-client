// Code generated by protoc-gen-http-client. DO NOT EDIT.
// version: 3.14.0
// source: greeting.proto

package greeting

import (
	"context"
	"fmt"
	util "github.com/Open-Myth/protoc-gen-http-client/util"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	"net/http"
	"net/url"
)

// HTTPClient is a http client for the GreetingService service
type GreetingServiceHTTPClient struct {
	BaseURL string
}

func NewGreetingServiceHTTPClient(baseURL string) *GreetingServiceHTTPClient {
	return &GreetingServiceHTTPClient{BaseURL: baseURL}
}

// SayHello is a http call method for the GreetingService service
func (c *GreetingServiceHTTPClient) SayHello(ctx context.Context, reqData *SayHelloRequest) (*SayHelloResponse, error) {
	path, err := url.JoinPath(c.BaseURL, "/v1/hello")
	if err != nil {
		return nil, status.Error(codes.InvalidArgument, fmt.Errorf("path is not valid: %w", err).Error())
	}

	reqClient, err := util.EncodeHTTPRequest(ctx, path, "POST", reqData)
	if err != nil {
		return nil, status.Error(codes.InvalidArgument, fmt.Errorf("unable to encode http request: %w", err).Error())
	}
	client := http.Client{}
	resp, err := client.Do(reqClient)
	if err != nil {
		return nil, status.Error(codes.Internal, fmt.Errorf("unable to request: %w", err).Error())
	}

	return util.DecodeHTTPResponse[SayHelloResponse](resp)
}
